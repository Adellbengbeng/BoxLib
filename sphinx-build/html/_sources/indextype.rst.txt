.. _indextype:

IndexType
=========

.. cpp:class:: IndexType

  Located in :boxlib:`Src/C_BaseLib/IndexType.H` and
  :boxlib:`Src/C_BaseLib/IndexType.cpp`.

  The class ``IndexType`` defines an index as being cell based or node
  (edge) based in each of the c:macro:`BL_SPACEDIM` directions.  This
  class defines an enumerated type ``CellIndex`` to be either ``CELL``
  or ``NODE``; i.e. each of the c:macro:`BL_SPACEDIM` dimensions must
  be either ``CELL`` or ``NODE``.


  **Constructors and copy assignment operator**

    .. cpp:function:: IndexType()

      The default constructor constructs an ``IndexType`` object whose
      index types are ``CELL`` in all directions.

    .. cpp:function:: explicit IndexType (const IntVect& iv)

      Constructs an ``IndexType`` object with index types specified by
      an ``IntVect``.

    .. cpp:function:: IndexType (CellIndex i)
                      IndexType (CellIndex i, CellIndex k)
                      IndexType (CellIndex i, CellIndex j, CellIndex k)

      Constructs an ``IndexType`` given the specific index types for
      all dimensions.

      .. note::

        Depending on the :c:macro:`SPACEDIM` macro, only one of the
        three versions above is present.

    The copy constructor and copy assignment operator are
    auto-generated by the compiler.

  **Destructor**

    The destructor is auto-generated by the compiler.

  **Member functions**

    .. cpp:function:: CellIndex ixType (int dir) const

      Returns the ``CellIndex`` in direction ``dir``.

    .. cpp:function:: int operator[] (int dir) const

      Returns an integer representing the ``IndexType`` in direction ``dir``.

    .. cpp:function:: bool test (int dir) const

      Returns true if ``IndexType`` is ``NODE`` based in direction
      ``dir``. 

    .. cpp:function:: bool any () const

      Returns true if ``IndexType`` is ``NODE`` based in any
      direction.

    .. cpp:function:: bool cellCentered () const

      Returns true if ``IndexType`` is ``CELL`` based in all
      directions.

    .. cpp:function:: bool cellCentered (int dir) const

      Returns true if ``IndexType`` is ``CELL`` based in direction ``dir``.

    .. cpp:function:: bool nodeCentered () const

      Returns true if ``IndexType`` is ``NODE`` based in all
      directions.

    .. cpp:function:: bool nodeCentered (int dir) const

      Returns true if ``IndexType`` is ``NODE`` based in direction ``dir``.

    .. cpp:function:: bool ok () const

      Return true if ``IndexType`` is valid.

    .. cpp:function:: void setType (int dir, CellIndex t)

      Modifies ``IndexType11 to ``CellIndex`` type ``t`` in direction ``dir``.

    .. cpp:function:: void set (int dir)

      Modifies ``IndexType`` to be ``NODE`` based in direction
      ``dir``. 

    .. cpp:function:: void setall ()

      Modifies ``IndexType`` to be ``NODE`` based in all directions.

    .. cpp:function:: void unset (int dir)

      Modidies ``IndexType`` to be ``CELL`` based in direction
      ``dir``. 

    .. cpp:function:: void clear ()

      Modifies ``IndexType`` to be ``CELL`` based in all directions.

    .. cpp:function:: void flip (int i)

      Changes from ``CELL`` to ``NODE`` or ``NODE`` to ``CELL`` in
      direction ``dir``.

    .. cpp:function:: operator== (const IndexType& rhs)
                      operator!= (const IndexType& rhs)

      Compares two ``IndexType``\ s.  They are identical if and only
      if they have the same index type in all directions.

    .. cpp:function:: static IndexType TheCellType ()

      Returns an ``IndexType`` object of value ``IndexType::CELL`` in
      all directions.

    .. cpp:function:: static IndexType TheNodeType ()

      Returns an ``IndexType`` object of value ``IndexType::NODE`` in
      all directions.

  **Other members**

    .. cpp:enum:: CellIndex
 
      The cell index types are 

        * ``CELL``
        * ``NODE``

**Non-member functions**

  .. cpp:function:: std::ostream& operator<< (std::ostream& os, const IndexType& itype)
                    std::istream& operator>> (std::istream& os, IndexType& itype)

    Performs stream output or input on ``IndexType``.

.. seealso::

  :c:macro:`BL_SPACEDIM`; :cpp:class:`IntVect`; :cpp:class:`Box`
