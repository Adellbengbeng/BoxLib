.. _array:

Array
=====

.. cpp:class:: template<class T> Array : public std::vector<T>

  Located in :boxlib:`Src/C_BaseLib/Array.H`.

  This class implements an array of objects of the parameterized type
  ``T``.  It is derived from ``std::vector``.  An ``Array<T>`` object
  knows its size and can be dynamically resized.  When the
  :c:macro:`NBEBUG` macro is defined, it provides automatic bounds
  checking.

  The ``Array<T>`` class works by storing copies of the objects it
  contains.  If the objects are large, it is probably better to use
  :cpp:class:`PArray`, an array class that stores pointers to the
  objects (avoiding expensive deep copies).

  **Constructors and copy assignment operator**

    .. cpp:function:: Array()

      The default constructor constructs an ``Array<T>`` with no
      elements.

    .. cpp:function:: explicit Array (size_t len)

      Constructs an ``Array<T>`` of size ``len`` with the value of
      each element defined by the default constructor for ``T``.  For
      built-in types, such as ``int``, this means zero initialization.

    .. cpp:function:: Array(size_t len, const T& initialvalue)

      Constructs an ``Array<T>`` of size ``len`` with the value of
      each elements given by ``initialvalue``.

    .. cpp:function:: Array(const T* vec, size_t len)

      Constructs an ``Array<T>`` of size ``len`` in which the ``K``'th
      value is a copy of ``vec[K]``.

    The copy constructor and copy assignment operator are
    auto-generated by the compiler.

  **Destructor**

    The destructor is auto-generated by the compiler.

  **Member functions**

    .. cpp:function:: int size() const

      Returns the size of the array.

    .. cpp:function:: T& operator[] (size_t i)
                      const T& operator[] (size_t i) const

      Returns a reference to the ``i``'th element in the array. 

    .. cpp:function:: T* dataPtr()
                      const T* dataPtr() const

      Returns a raw pointer to the data.  This is useful for passing
      the data to Fortran subroutines.

.. seealso::

  :cpp:class:`PArray`
