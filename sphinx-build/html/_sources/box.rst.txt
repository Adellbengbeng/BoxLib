.. _box:

Box
===

.. cpp:class:: Box

  Located in :boxlib:`Src/C_BaseLib/Box.H` and
  :boxlib:`Src/C_BaseLib/Box.cpp`.

  A ``Box`` is an abstraction for defining discrete regions of
  :c:macro:`BL_SPACEDIM`\ -dimensional indexing space.  ``Box``\ es
  have an :cpp:class:`IndexType`, which defines ``IndexType::CELL`` or
  ``IndexType::NODE`` based points for each direction and a low and
  high :cpp:class:`IntVect` which defines the lower and upper corners
  of the ``Box``.  ``Box``\ es can exist in positive and negative
  indexing space.

  **Constructors and copy assignment operator**

    .. cpp:function:: Box()

      The default constructor constructs an empty ``Box``.

    .. cpp:function:: Box (const IntVect& small, const IntVect& big)

      Constructs a cell-centered ``Box`` with specified lower and
      upper corners.

    .. cpp:function:: Box (const IntVect& small, const int* vec_len)

      Constructs a cell-centered ``Box`` with specified lower corner
      and lengths.

    .. cpp:function:: Box (const IntVect& small, const IntVect& big,\
                           const IntVect& typ)


       Constructs a ``Box`` with given index type ``typ`` (represented
       by ``IntVect``) and lower and upper corners.

    .. cpp:function:: Box (const IntVect& small, const IntVect& big,\
                           IndexType t)

       Constructs a ``Box`` with given index type ``t`` and lower
       and upper corners.

    The copy constructor and copy assignment operator are
    auto-generated by the compiler.

  **Destructor**

    The destructor is auto-generated by the compiler.

  **Member functions**

    .. cpp:function:: const IntVect& smallEnd () const

      Returns the small end of the ``Box``.

    .. cpp:function:: int smallEnd (int dir) const

      Returns the coordinate of the low end in the given direction.

    .. cpp:function:: const IntVect& bigEnd () const

      Returns the big end of the ``Box``.

    .. cpp:function:: int bigEnd (int dir) const

      Returns the coordinate of the big end in the given direction.

    .. cpp:function:: int operator[] (Orientation face) const

      Returns the coordinate normal to given face.

    .. cpp:function:: IndexType ixType() const
                      IntVect type() const

      Returns the indexing type.

    .. cpp:function:: IndexType::CellIndex type (int dir) const

      Returns the indexing type in the specified direction.

    .. cpp:function:: IntVect size() const

      Returns the length of the Box.

    .. cpp:function:: int length (int dir) const

      Returns the length of the ``Box`` in the specified direction.

    .. cpp:function:: const int* loVect () const
                      const int* loVect () const

      Returns a ``const`` pointer to the array of low or high end
      coordinates of the Box.  Useful for :ref:`calls to Fortran
      <fortran>`.

    .. cpp:function:: bool isEmpty() const

      Returns true if the ``Box`` is empty.

    .. cpp:function:: bool ok() const

      Returns true if the ``Box`` is valid (including valid index
      type).

      .. note::

        A call to ``ok()`` by an empty Box returns ``false``.

    .. cpp:function:: bool cellCentered () const

      Returns true if ``Box`` is cell-centered in all directions.

    .. cpp:function:: long numPts() const
                      double d_numPts() const

      Returns the number of points in the ``Box``.

    .. cpp:function:: long volume () const

      Returns the volume, in indexing space, of region enclosed by
      this ``Box``.  This is identical to ``numPts()`` for
      cell-centered ``Box``\ e; otherwise, ``numPts() > volume()``.
      For example::

	Box bx(IntVect(D_DECL(0,0,0)), IntVect(D_DECL(4,4,4)), IndexType::TheNodeType());
        std::cout << bx.numPts() << "\n"; // 5 x 5 x 5 = 125 in 3D
        std::cout << bx.volume() << "\n"; // 4 x 4 x 4 = 64 in 3D

    .. cpp:function:: int longside () const
                      int longside (int& dir) const

      Returns the length of the longest side.  The argument ``dir``,
      if provided, is modified to give direction with the longest
      side.

    .. cpp:function:: int shortside () const
                      int shortside (int& dir) const

      Returns the length of the shortest side.  The argument ``dir``,
      if provided, is modified to give direction with the shorest
      side.

    .. cpp:function:: long index (const IntVect& v) const

      Returns offset of the point represented by ``IntVect`` from the
      small end of ``Box``, assuming column-major order as in
      Fortran.

    .. cpp:function:: Box& setSmall (const IntVect& sm)

      Redefines the small end of ``Box`` to ``IntVect sm``.

    .. cpp:function:: Box& setSmall (int dir, int sm_index)

      Redefines the small end of ``Box`` at direction ``dir`` to
      ``sm_index``.

    .. cpp:function:: Box& setBig (const IntVect& bg)

      Redefines the big end of ``Box`` to ``IntVect bg``.

    .. cpp:function:: Box& setBig (int dir, int bg_index)

      Redefines the big end of ``Box`` at direction ``dir`` to
      ``bg_index``.

    .. cpp:function:: Box& setRange (int dir, int sm_index, int n_cells = 1)

      Set the range in direction ``dir``, starting at ``sm_index``
      with length ``n_cells``.

    .. cpp:function:: Box& shift (int dir, int nzones)

      Shifts ``Box`` in direction ``dir`` by ``nzones`` indexing
      positions. 

    .. cpp:function:: Box& shift (const IntVect& iv)

      Shifts ``Box`` by ``IntVect iv``.

    .. cpp:function:: Box& convert (IndexType typ)
                      Box& convert (const IntVect& typ)

      Converts ``Box`` from the current type into the argument type.
      The ``volume`` of ``Box`` does not change, whereas the
      ``length`` and the number of points may change.  See also,
      functions ``volume`` and ``numPts``.

      .. seealso::

        :cpp:func:`BoxLib::convert`

    .. cpp:function:: Box& surroundingNodes ()
                      Box& surroundingNodes (int dir)

      Converts ``Box`` to ``NODE`` in all directions or given
      direction ``dir``.  The ``volume`` of ``Box`` does not change,
      whereas the ``length`` and the number of points will increase if
      the previous type is ``CELL``.  See also, functions ``volume``
      and ``numPts``.

      .. seealso::

        :cpp:func:`BoxLib::surroundingNodes`

    .. cpp:function:: Box& enclosedCells ()
    .. cpp:function:: Box& enclosedCells (int dir)

      Converts ``Box`` to ``CELL`` in all directions or given
      direction ``dir``.  The ``volume`` of ``Box`` does not change,
      whereas the ``length`` and the number of points will decrease if
      the previous is ``NODE``.  See also, functions ``volume`` and
      ``numPts``.

      .. seealso::

        :cpp:func:`BoxLib::enclosedCells`

    .. cpp:function:: Box operator& (const Box& rhs) const

      Returns a ``Box`` that is intersection of this ``Box`` and
      argument.  The ``Box``\ es MUST be of same type.

    .. cpp:function:: Box& operator&= (const Box& rhs)

      Intersects this ``Box`` with the argument.  This ``Box`` is
      modified.  The ``Box``\ es MUST be of same type.

    .. cpp:function:: Box operator+ (const IntVect& v) const
                      Box operator- (const IntVect& v) const

      Returns a ``Box`` that is this ``Box`` shifted (positively or
      negatively) by given ``IntVect``.

    .. cpp:function:: Box& operator+= (const IntVect& v)
                      Box& operator-= (const IntVect& v)

      Modifies this ``Box`` by shifting (positively or negatively) by
      given ``IntVect``.

    .. cpp:function:: Box& grow (int i)

      Modifies ``Box`` by growing the low and high ends in all
      directions by given amount.

      .. seealso::

        :cpp:func:`BoxLib::grow`

    .. cpp:function:: Box& grow (const IntVect& v)

      Modifies ``Box`` by growing the low and high ends by specified
      amount.

      .. seealso::

        :cpp:func:`BoxLib::grow`

    .. cpp:function:: Box& grow (int idir, int n_cell)

      Modifies ``Box`` by growing the low and high ends in direction
      ``idir`` by ``n_cell`` points.

    .. cpp:function:: Box& growLo (int idir, int n_cell = 1)

      Modifies ``Box`` by growing the low end in direction ``idir`` by
      ``n_cell`` points.

    .. cpp:function:: Box& growHi (int idir, int n_cell = 1)

      Modifies ``Box`` by growing the high end in direction ``idir`` by
      ``n_cell`` points.

    .. cpp:function:: Box& grow (Orientation face, int n_cell = 1)

      Modifies ``Box`` by growing the given face by ``n_cell``
      points. 

    .. cpp:function:: Box& refine (int refinement_ratio)
                      Box& refine (const IntVect& refinement_ratio)

      Refines ``Box`` by given refinement ratio.  The refined ``Box``
      covers the same physical domain as before.  Example::

        // Refine a nodal box
	Box nbx(IntVect(D_DECL(0,0,0)), IntVect(D_DECL(4,4,4)), IndexType::TheNodeType());
        std::cout << nbx.refine(2) << "\n"; 

        // Refine a cell-centered box
	Box cbx(IntVect(D_DECL(0,0,0)), IntVect(D_DECL(3,3,3)));
        std::cout << cbx.refine(2) << "\n"; 

      The code above (in 3D) produces::

        ((0,0,0) (8,8,8) (1,1,1))  // a nodal box whose big end is (8,8,8)
        ((0,0,0) (7,7,7) (0,0,0))  // a cell box whose big end is (7,7,7)

      .. seealso::

        :cpp:func:`BoxLib::refine`

    .. cpp:function:: Box& coarsen (int refinement_ratio)
                      Box& coarsen (const IntVect& refinement_ratio)

      Coarsens ``Box`` by given refinement ratio.

      .. note::

        If the coarsened ``Box`` is refined by the same refinement,
	the original ``Box`` is not necessarily reproduced.

      .. seealso::

        :cpp:func:`BoxLib::coarsen`

    .. cpp:function:: bool contains (const Box& b) const
                      bool strictly_contains (const Box& b) const
                      
      Returns true if the argument ``Box`` is contained or strictly
      contained within this ``Box``.  By "strictly", it means the two
      ``Box``\ es do not share borders.  It's a runtime error if the
      two ``Box`` es have different types.

    .. cpp:function:: bool contains (const IntVect& p) const
                      bool stictly_contains (const IntVect& p) const

      Returns true if the coordinates denoted by the argument is
      contained or strictly contained within ``Box``.  A point/cell on
      the borders of the ``Box`` is contained but not strictly
      contained.

    .. cpp:function:: Box& minBox (const Box&)

      Modifies ``Box`` to that of the minimum ``Box`` containing both
      the original ``Box`` and the argument.  Both ``Box``\ es must
      have identical type.

      .. seealso::

        :cpp:func:`BoxLib::minBox`

    .. cpp:function:: bool intersects (const Box& b) const

      Return true if ``Box``\ es intersect.  It's a runtime error if
      the two ``Box`` es have different types.  An empty ``Box`` does
      not intersect with any ``Box`` \ es.

    .. cpp:function:: bool sameSize (const Box& b) const

      Returns true if ``Box``\ es have the same size.  Note that they
      do not need to be identical.  It's a runtime error if the two
      ``Box`` es have different types.

    .. cpp:function:: bool sameType (const Box &b) const

      Returns true if ``Box``\ es have the same type. 

    .. cpp:function:: bool operator== (const Box& rhs) const
                      bool operator!= (const Box& rhs) const

      Returns true if ``Box``\ es are identical (including type) or
      differ (including type). 

**Non-member functions**

  .. cpp:function:: std::ostream& operator<< (std::ostream& os, const Box& bx)
                    std::istream& operator>> (std::istream& is, Box& bx)

    Performs stream output or input on ``Box``.  For example::

      Box bx(IntVect(D_DECL(4,4,4)), IntVect(D_DECL(16,16,16)), IndexType::TheNodeType());
      std::cout << bx; 

    in 3D produces::

      ((4,4,4) (16,16,16) (1,1,1))

    Here ``(4,4,4)`` and ``(16,16,16)`` denote the lower and upper
    corners, respectively.  The ``NODE`` indexing space is denoted by
    ``(1,1,1)``. 

  .. cpp:function:: Box BoxLib::grow (const Box& b, int i)

    Returns a ``Box`` by growing the argument ``Box`` in all
    directions by given amount.

    .. seealso::

      :cpp:func:`Box::grow`

  .. cpp:function:: Box BoxLib::grow (const Box& b, const IntVect& v)

    Returns a ``Box`` by growing the argument ``Box`` by specified
    amount. 

    .. seealso::

      :cpp:func:`Box::grow`

  .. cpp:function:: Box BoxLib::coarsen (const Box& b, int refinement_ratio)
                    Box BoxLib::coarsen (const Box& b, const IntVect& refinement_ratio)

    Returns a coarsened ``Box``.

    .. seealso::

      :cpp:func:`Box::coarsen`

  .. cpp:function:: Box BoxLib::refine (const Box& b, int refinement_ratio)
                    Box BoxLib::refine (const Box& b, const IntVect& refinement_ratio)

    Returns a refined ``Box``.

    .. seealso::

      :cpp:func:`Box::refine`

  .. cpp:function:: Box BoxLib::convert(const Box& b, const IntVect& typ)
                    Box BoxLib::convert (const Box& b, const IndexType& typ)

    Returns a ``Box`` with different type.

    .. seealso::

      :cpp:func:`Box::convert`

  .. cpp:function:: Box BoxLib::surroundingNodes (const Box& b, int dir)
                    Box BoxLib::surroundingNodes (const Box& b)

    Returns a ``Box`` that is converted from the argument ``Box`` to
    ``NODE`` in all directions or given direction ``dir``.

    .. seealso::

      :cpp:func:`Box::surroundingNodes`

  .. cpp:function:: BoxLib::enclosedCells (const Box& b, int dir)
                    BoxLib::enclosedCells (const Box& b)

    Returns a ``Box`` that is converted from the argument ``Box`` to ``CELL`` in all directions or given
    direction ``dir``.

    .. seealso::

      :cpp:func:`Box::enclosedCells`

  .. cpp:function:: Box BoxLib::minBox (const Box& b1, const Box& b2)

    Returns the minimum ``Box`` containing both argument ``Box``\ es,
    which must have identical type. 

    .. seealso::

      :cpp:func:`Box::minBox`

.. seealso::

  :c:macro:`BL_SPACEDIM`; :cpp:class:`IntVect`; :cpp:class:`IndexType`; :cpp:class:`Orientation`; :cpp:class:`BoxArray`

