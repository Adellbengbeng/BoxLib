.. _intvect:

IntVect
=======

.. cpp:class:: IntVect

  Located in :boxlib:`Src/C_BaseLib/IntVect.H` and :boxlib:`Src/C_BaseLib/IntVect.cpp`.

  ``IntVect`` is an implementation of an integer vector in a
  ``SPACEDIM``-dimensional space, where the :c:macro:`SPACEDIM` macro
  is 1, 2, or 3.  It represents a point in a discrete space.
  ``IntVect`` values are accessed using the ``operator[]`` function.
  In addition, the basic arithmetic operators have been overloaded to
  implement scaling and translation operations.

**Constructors and copy assignment operator**

  .. cpp:function:: IntVect()

    The default constructor constructs an IntVect object whose
    components are all **zero**. 

  .. cpp:function:: IntVect(int i)
                    IntVect(int i, int j)
                    IntVect(int i, int j, int k)

    Constructs an ``IntVect`` given the specific values for its
    coordinates.  

    .. note::

      Depending on the :c:macro:`SPACEDIM` macro, only one of the
      three versions above is present.

  .. cpp:function:: explicit IntVect(const int* a)

    Constructs an ``IntVect`` setting the coordinates to the
    corresponding values in the integer array a.

  .. cpp:function:: explicit IntVect(const Array<int>& a)

    Constructs an ``IntVect`` from an :cpp:class:`Array`\ <int>.  It
    is an error if the :cpp:class:`Array`\ <int> doesn't have the same
    dimension as this ``IntVect``.

  The copy constructor and copy assignment operator are auto-generated
  by the compiler.

**Destructor**

  The destructor is auto-generated by the compiler.

**Member functions**

  .. cpp:function:: int& operator[] (int i)

    Returns a reference to the ``i``'th coordinate of the
    ``IntVect``. 

  .. cpp:function:: int operator[] (int)

    Return the value of the ``i``'th coordinate of the ``IntVect``.

  .. cpp:function:: const int* getVect() const
                    int* getVect()

    Returns a pointer to an array of coordinates of the ``IntVect``.
    Useful for argument to :ref:`Fortran calls <fortran>`.

  .. cpp:function:: IntVect& setVal (int i, int val)

    Sets ``i``'th coordinate of ``IntVect`` to ``val``.

  .. cpp:function:: bool operator== (const IntVect& p) const

    Returns true if ``IntVect`` is equivalent to argument ``IntVect``.
    All comparisons between analogous components must be satisfied.

  .. cpp:function:: operator!= (const IntVect& p) const

    Returns true if ``IntVect`` is different from argument ``IntVect``
    for **any** of their corresponding components.

  .. cpp:function:: bool operator< (const IntVect& p) const
                    bool operator<= (const IntVect& p) const
                    bool operator> (const IntVect& p) const
                    bool operator>= (const IntVect& p) const

    Returns true if **all** comparisons between analogous components
    are satisfied.
    
    .. note::

      This is NOT a strictly weak ordering usable by STL sorting
      algorithms.  For that one can use :cpp:class:`IntVect::Compare`.

  .. cpp:function:: IntVect operator- () const

    Unary minus operator that negates all components.

  .. cpp:function:: IntVect& operator+= (int s)
                    IntVect& operator-= (int s)
                    IntVect& operator*= (int s)
                    IntVect& operator/= (int s)
                    IntVect operator+ (int s) const
                    IntVect operator- (int s) const
                    IntVect operator* (int s) const
                    IntVect operator/ (int s) const

    Component-wise operators with a scalar.

  .. cpp:function:: IntVect& operator+= (const IntVect& p)
                    IntVect& operator-= (const IntVect& p)
                    IntVect& operator*= (const IntVect& p)
                    IntVect& operator/= (const IntVect& p)
                    IntVect operator+ (const IntVect& p) const
                    IntVect operator- (const IntVect& p) const
                    IntVect operator* (const IntVect& p) const
                    IntVect operator/ (const IntVect& p) const

    Component-wise operators with an ``IntVect``.



**Nested class**

  .. cpp:class:: IntVect::Compare

    An ``IntVect`` comparison class.  Needed for STL associative
    containers indexed by ``IntVects``.  Uses lexicographical
    comparison.

**Non-member functions**

