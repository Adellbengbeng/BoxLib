.. _intvect:

IntVect
=======

.. cpp:class:: IntVect

  Located in :boxlib:`Src/C_BaseLib/IntVect.H` and :boxlib:`Src/C_BaseLib/IntVect.cpp`.

  ``IntVect`` is an implementation of an integer vector in a
  ``SPACEDIM``-dimensional space, where the :c:macro:`SPACEDIM` macro
  is 1, 2, or 3.  It represents a point in a discrete space.
  ``IntVect`` values are accessed using the ``operator[]`` function.
  In addition, the basic arithmetic operators have been overloaded to
  implement scaling and translation operations.

  **Constructors and copy assignment operator**
  
    .. cpp:function:: IntVect()
  
      The default constructor constructs an IntVect object whose
      components are all **zero**. 
  
    .. cpp:function:: IntVect(int i)
                      IntVect(int i, int j)
                      IntVect(int i, int j, int k)
  
      Constructs an ``IntVect`` given the specific values for its
      coordinates.  
  
      .. note::
  
        Depending on the :c:macro:`SPACEDIM` macro, only one of the
        three versions above is present.
  
    .. cpp:function:: explicit IntVect(const int* a)
  
      Constructs an ``IntVect`` setting the coordinates to the
      corresponding values in the integer array a.
  
    .. cpp:function:: explicit IntVect(const Array<int>& a)
  
      Constructs an ``IntVect`` from an :cpp:class:`Array`\ <int>.  It
      is an error if the :cpp:class:`Array`\ <int> doesn't have the same
      dimension as this ``IntVect``.
  
    The copy constructor and copy assignment operator are auto-generated
    by the compiler.
  
  **Destructor**
  
    The destructor is auto-generated by the compiler.
  
  **Member functions**
  
    .. cpp:function:: int& operator[] (int i)
  
      Returns a reference to the ``i``'th coordinate of the
      ``IntVect``. 
  
    .. cpp:function:: int operator[] (int)
  
      Return the value of the ``i``'th coordinate of the ``IntVect``.
  
    .. cpp:function:: const int* getVect() const
                      int* getVect()
  
      Returns a pointer to an array of coordinates of the ``IntVect``.
      Useful for argument to :ref:`Fortran calls <fortran>`.
  
    .. cpp:function:: IntVect& setVal (int i, int val)
  
      Sets ``i``'th coordinate of ``IntVect`` to ``val``.
  
    .. cpp:function:: bool operator== (const IntVect& p) const
  
      Returns true if ``IntVect`` is equivalent to argument ``IntVect``.
      All comparisons between analogous components must be satisfied.
  
    .. cpp:function:: operator!= (const IntVect& p) const
  
      Returns true if ``IntVect`` is different from argument ``IntVect``
      for **any** of their corresponding components.
  
    .. cpp:function:: bool operator< (const IntVect& p) const
                      bool operator<= (const IntVect& p) const
                      bool operator> (const IntVect& p) const
                      bool operator>= (const IntVect& p) const
  
      Returns true if **all** comparisons between analogous components
      are satisfied.
      
      .. note::
  
        This is NOT a strict weak ordering usable by STL sorting
        algorithms.  For that one can use :cpp:class:`IntVect::Compare`.
  
    .. cpp:function:: IntVect operator- () const
  
      Unary minus operator that negates all components.
  
    .. cpp:function:: IntVect& operator+= (int s)
                      IntVect& operator-= (int s)
                      IntVect& operator*= (int s)
                      IntVect& operator/= (int s)
                      IntVect operator+ (int s) const
                      IntVect operator- (int s) const
                      IntVect operator* (int s) const
                      IntVect operator/ (int s) const
  
      Component-wise operators with a scalar.
  
    .. cpp:function:: IntVect& operator+= (const IntVect& p)
                      IntVect& operator-= (const IntVect& p)
                      IntVect& operator*= (const IntVect& p)
                      IntVect& operator/= (const IntVect& p)
                      IntVect operator+ (const IntVect& p) const
                      IntVect operator- (const IntVect& p) const
                      IntVect operator* (const IntVect& p) const
                      IntVect operator/ (const IntVect& p) const
  
      Component-wise operators with an ``IntVect``.
  
    .. cpp:function:: IntVect& min (const IntVect& p)
                      IntVect& max (const IntVect& p)
  
      Modifies ``IntVect`` by taking component-wise min or max with argument.
  
    .. cpp:function:: IntVect& shift (int coord, int s)
  
      Modifies ``IntVect`` by adding ``s`` to given coordinate ``coord``.
  
    .. cpp:function:: IntVect& shift (const IntVect& iv)
  
      Equivalent to ``operator+=``.
  
    .. cpp:function:: IntVect& coarsen (const IntVect& p)
                      IntVect& coarsen (int p)
  
     Modifies ``IntVect`` by component-wise integer projection.
  
     .. note::
  
       This coarsen function is same as ``operator/=`` for non-negative
       values, but they are different for negative values::
  
         #include <iostream>
         #include <BoxLib.H>
         #include <IntVect.H>
         
         int main(int argc, char* argv[])
         {
             BoxLib::Initialize(argc,argv);
         
             std::cout << "IntVect(D_DECL(0, 1, 4)).coarsen(4) gives "
                       <<  IntVect(D_DECL(0, 1, 4)).coarsen(4) << std::endl;
  
             std::cout << "IntVect(D_DECL(0, 1, 4)).operator/=(4) gives "
                       <<  IntVect(D_DECL(0, 1, 4)).operator/=(4) << std::endl;
         
             std::cout << "IntVect(D_DECL(-1,-3,-4)).coarsen(4) gives "
                       <<  IntVect(D_DECL(-1,-3,-4)).coarsen(4) << std::endl;
  
             std::cout << "IntVect(D_DECL(-1,-3,-4)).operator/=(4) gives "
                       <<  IntVect(D_DECL(-1,-3,-4)).operator/=(4) << std::endl;
         
             BoxLib::Finalize();
         }
  
       Results::
  
         IntVect(D_DECL(0, 1, 4)).coarsen(4) gives (0,0,1)
         IntVect(D_DECL(0, 1, 4)).operator/=(4) gives (0,0,1)
         IntVect(D_DECL(-1,-3,-4)).coarsen(4) gives (-1,-1,-1)
         IntVect(D_DECL(-1,-3,-4)).operator/=(4) gives (0,0,-1)
  
    .. cpp:function:: static const IntVect& TheZeroVector ()
      
      Returns a ``const`` reference to an ``IntVect`` object, all of whose
      :c:macro:`BL_SPACEDIM` components are set to zero (0).
      Figuratively, it is the zero vector in
      :c:macro:`BL_SPACEDIM`\ -dimensional space.  It is provided as a
      convenient way to specify the zero vector.
  
    .. cpp:function:: static const IntVect& TheUnitVector ()
  
      Returns a ``const`` reference to an ``IntVect`` object, all of whose
      :c:macro:`BL_SPACEDIM` components are set to one (1).
      Figuratively, it is the unit vector in
      :c:macro:`BL_SPACEDIM`\ -dimensional space.  It is provided as a
      convenient way to specify the unit vector.
  
    .. cpp:function:: static const IntVect& TheDimensionVector (int d)
  
      Returns a ``const`` reference to an ``IntVect`` object, all of
      whose ``BL_SPACEDIM`` components are set to zero except that the
      ``d``-direction is set to one.
  
    .. cpp:function:: static const IntVect& TheNodeVector ()
  
      Returns a ``const`` reference to an ``IntVect`` object, all of
      whose ``BL_SPACEDIM`` components are set to ``IndexType::NODE``.
      It is provided as a convenience when defining a :cpp:class:`nodal
      <IndexType>` :cpp:class:`Box`.
  
    .. cpp:function:: static const IntVect& TheMaxVector ()
                      static const IntVect& TheMinVector ()
  
      Returns a ``const`` reference to an ``IntVect`` object, all of
      whose ``BL_SPACEDIM`` components are set to the maximal or minimal
      integer.
  
  **Nested class**
  
    .. cpp:class:: IntVect::Compare
  
      An ``IntVect`` comparison class.  Needed for STL associative
      containers indexed by ``IntVects``.  Uses lexicographical
      comparison.

**Non-member functions**

  .. cpp:function:: std::ostream& operator<< (std::ostream& os, const IntVect& iv)
                    std::istream& operator>> (std::istream& os, IntVect& iv)

    Performs stream output or input on ``IntVect``.

  .. cpp:function:: IntVect BoxLib::min (const IntVect& p1, const IntVect& p2)
                    IntVect BoxLib::max (const IntVect& p1, const IntVect& p2)
  
    Returns the ``IntVect`` that is the component-wise minimum or
    maximum of the two argument ``IntVect``\ s.
  
  .. cpp:function:: IntVect BoxLib::scale (const IntVect& p, int s)
  
    Returns an ``IntVect`` obtained by multiplying each of the
    components of the argument ``IntVect`` by ``s``.
  
  .. cpp:function:: IntVect BoxLib::coarsen (const IntVect& p, int s)
  
    Returns an ``IntVect`` that is the component-wise integer
    projection of the argument ``IntVect`` by ``s``.
  
  .. cpp:function:: IntVect BoxLib::coarsen (const IntVect& p1, const IntVect& p2)
  
    Returns an ``IntVect`` that is the component-wise integer
    projection of ``IntVect p1`` by ``IntVect p2``.

.. seealso::
  
  :c:macro:`BL_SPACEDIM`; :cpp:class:`IndexType`; :cpp:class:`Box`
  
