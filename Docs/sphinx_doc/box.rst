.. _box:

Box
===

.. doxygenclass:: Box

**Constructors and copy assignment operator**

    .. doxygenfunction:: Box()
    
    .. doxygenfunction:: Box(const IntVect&, const IntVect&, const IntVect&)
    
    .. doxygenfunction:: Box(const IntVect&, const int *)
    
    .. doxygenfunction:: Box(const IntVect&, const IntVect&, const IntVect&)
    
    .. doxygenfunction:: Box(const IntVect&, const IntVect&, IndexType)
    
    The copy constructor and copy assignment operator are
    auto-generated by the compiler.

**Destructor**

    The destructor is auto-generated by the compiler.

**Member functions**

    .. doxygenfunction:: Box::smallEnd() const
    
    .. doxygenfunction:: Box::smallEnd(int) const

    .. doxygenfunction:: Box::bigEnd() const

    .. doxygenfunction:: Box::bigEnd(int) const

    .. doxygenfunction:: Box::operator[] 

    .. doxygenfunction:: Box::ixType() const

    .. doyxgenfunction:: Box::type() const

    .. doxygenfunction:: Box::type(int) const

    .. doxygenfunction:: Box::size() const

    .. doxygenfunction:: Box::length(int) const

    .. doxygenfunction:: Box::loVect() const
    ..                       const int* loVect () const

    .. doxygenfunction:: Box::isEmpty() const

    .. doxygenfunction:: Box::ok() const

    .. note::
         
       A call to ``ok()`` by an empty Box returns ``false``.

    .. doxygenfunction:: cellCentered() const

    .. doxygenfunction:: numPts() const
                         d_numPts() const

    .. doxygenfunction::volume() const

    For example::
    
       Box bx(IntVect(D_DECL(0,0,0)), IntVect(D_DECL(4,4,4)), IndexType::TheNodeType());
       std::cout << bx.numPts() << "\n"; // 5 x 5 x 5 = 125 in 3D
       std::cout << bx.volume() << "\n"; // 4 x 4 x 4 = 64 in 3D
     
    .. doxygenfunction:: longside() const
                         longside (int&) const

    .. doxygenfunction:: shortside() const
                         shortside (int& dir) const

    .. doxygenfunction:: index(const IntVect&) const

    .. doxygenfunction:: setSmall(const IntVect&)

    .. doxygenfunction:: setSmall(int, int)

    .. doxygenfunction:: setBig(const IntVect&)

    .. doxygenfunction:: setBig(int, int)

    .. doxygenfunction:: setRange

    .. doxygenfunction:: Box::shift(int, int)

    .. doxygenfunction:: Box::convert(IndexType)

    .. doxygenfunction:: Box::convert(const IntVect&)
    
    .. seealso::

         :cpp:func:`BoxLib::convert`
           
    .. doxygenfunction:: surroundingNodes()
    ..                       Box& surroundingNodes (int dir)

    .. seealso::
     
             :cpp:func:`BoxLib::surroundingNodes`
    
    .. doxygenfunction:: enclosedCells()
    .. doxygenfunction:: enclosedCells(int)

    .. seealso::

        :cpp:func:`BoxLib::enclosedCells`

    .. doxygenfunction:: Box::operator&(const Box&) const

    .. doxygenfunction:: Box::operator&=(const Box&)

    .. doxygenfunction:: Box::operator+(const IntVect&) const
    ..                       Box operator- (const IntVect& v) const

    .. doxygenfunction:: Box::operator+=(const IntVect&)
    ..                       Box& operator-= (const IntVect& v)

    .. doxygenfunction:: grow(int)

    .. seealso::
    
        :cpp:func:`BoxLib::grow`

    .. doxygenfunction:: grow(const IntVect&)

    .. seealso::
     
             :cpp:func:`BoxLib::grow`
     
    .. doxygenfunction:: grow(int, int)

    .. doxygenfunction:: growLo(int, int)

    .. doxygenfunction:: growHi(int, int)

    .. doxygenfunction:: grow(Orientation,int)

    .. doxygenfunction:: refine(int)
    ..                       Box& refine (const IntVect& refinement_ratio)


    For Example:

    .. code-block:: c
       
        // Refine a nodal box
        Box nbx(IntVect(D_DECL(0,0,0)), IntVect(D_DECL(4,4,4)), IndexType::TheNodeType());
        std::cout << nbx.refine(2) << "\n"; 
       
        // Refine a cell-centered box
       Box cbx(IntVect(D_DECL(0,0,0)), IntVect(D_DECL(3,3,3)));
       std::cout << cbx.refine(2) << "\n"; 
    
    The code above (in 3D) produces::
       
       ((0,0,0) (8,8,8) (1,1,1))  // a nodal box whose big end is (8,8,8)
       ((0,0,0) (7,7,7) (0,0,0))  // a cell box whose big end is (7,7,7)
      
    .. seealso::
      
       :cpp:func:`BoxLib::refine`
      
    .. doxygenfunction:: coarsen(int)
                         coarsen(const IntVect& )

    .. note::
    
            If the coarsened ``Box`` is refined by the same refinement, the original ``Box`` is not necessarily reproduced.
    
    .. seealso::
    
        :cpp:func:`BoxLib::coarsen`
    
    .. doxygenfunction:: contains(const Box&) const
    ..                       bool strictly_contains (const Box& b) const

    .. doxygenfunction:: contains(const IntVect&) const
    ..                       bool stictly_contains (const IntVect& p) const

    .. doxygenfunction:: minBox(const Box&)

    .. seealso::
        
                :cpp:func:`BoxLib::minBox`
        
    .. doxygenfunction:: intersects(const Box&) const

    .. doxygenfunction:: sameSize(const Box&) const

    .. doxygenfunction:: sameType(const Box) const

    .. doxygenfunction:: Box::operator==(const Box&) const
    .. doxygenfunction:: Box::operator!=(const Box&) const

**Non-member functions**

  .. doxygenfunction:: operator<<(std::ostream&, const Box&)

  .. doxygenfunction:: operator>>(std::istream&, Box&)

  For example::

    Box bx(IntVect(D_DECL(4,4,4)), IntVect(D_DECL(16,16,16)), IndexType::TheNodeType());
    std::cout << bx; 

  in 3D produces::

    ((4,4,4) (16,16,16) (1,1,1))

  Here ``(4,4,4)`` and ``(16,16,16)`` denote the lower and upper
  corners, respectively.  The ``NODE`` indexing space is denoted by
  ``(1,1,1)``. 

  .. doxygenfunction:: BoxLib::grow(const Box&, int)

  .. seealso::

      :cpp:func:`Box::grow`

  .. doxygenfunction:: BoxLib::grow(const Box&, const IntVect&)

  .. seealso::

      :cpp:func:`Box::grow`

  .. doxygenfunction:: BoxLib::coarsen(const Box&, int)

  .. doxygenfunction:: BoxLib::coarsen(const Box&, const IntVect&)

  .. seealso::

      :cpp:func:`Box::coarsen`

  .. doxygenfunction:: BoxLib::refine(const Box&, int)
  .. doxygenfunction:: BoxLib::refine(const Box&, const IntVect&)


  .. seealso::

    :cpp:func:`Box::refine`

  .. doxygenfunction:: BoxLib::convert(const Box&, const IntVect&)

  .. doxygenfunction:: BoxLib::convert(const Box&, const IndexType&)


  .. seealso::

      :cpp:func:`Box::convert`

  .. doxygenfunction:: BoxLib::surroundingNodes(const Box&, int)

  .. doxygenfunction:: BoxLib::surroundingNodes(const Box&)

  .. seealso::

      :cpp:func:`Box::surroundingNodes`

  .. doxygenfunction:: BoxLib::enclosedCells(const Box&, int)

  .. doxygenfunction:: BoxLib::enclosedCells(const Box&)

  .. seealso::

      :cpp:func:`Box::enclosedCells`

  .. doxygenfunction:: BoxLib::minBox(const Box&, const Box&)

  .. seealso::

      :cpp:func:`Box::minBox`

.. seealso::

  :c:macro:`BL_SPACEDIM`; :cpp:class:`IntVect`; :cpp:class:`IndexType`; :cpp:class:`Orientation`; :cpp:class:`BoxArray`

